Task 1: Installing Ansible
- Install Ansible on host ansible-control.example.com and create user ansible that is used to manage Ansible.
- Set up the managed host in a way that user ansible can be used for all ansible tasks.
- Create inventory and Ansible configuration file in the project directory "exam-lab".
- Use Ad-hoc commands to verify that the user ansible exists on managed hosts.

Task 2: Creating Playbook - 1
- Create a playbook to setup ansible0.example.com as web server. Use another playbook to install wget and elinks
  on ansible1.example.com and ansible2.example.com. For the playbook use the following instructions:
    - Create host group webservers and host group webclient to run the playbook on appropriate hosts.
    - Provide a sample httpd.conf file as Jinja2 template. Copy it to web/templates directory and ensure it is
      copied to the all webservers.
    - Define the following variables in the file vars/web-vars and use them will setting up the webservers:
        web_packages        httpd
        web_service         httpd
        web_config_file     /etc/httpd/httpd.conf
        firewall_service    http
    - Ensure that the web package is installed.
    - Ensure that the services is enabled and started.
    - Open port in the firewalld firewall
    - Copy the httpd.conf template file, using the following:
        owner root
        group root
        permission 0664
        SELinux context httpd_config_t
    - Use a handler to restart the web server after coping the configuration file.

Task 2: Create playbook - 2
- Create playbook that sets up webclient machines and installs elinks and wget on them.
- Create generic playbook with the name "web" which you can use to run both playbooks by using includes.

Task 3: Creating Roles - 1
- Convert previously created playbook into a role and use web-role directory to store all of it configurations.
- Use Ansible Galaxy to create directory structure for the role in the web-role directory.
- Put variable and template file in the appropriate location.
- Use meta/main.yml file to include information about author and license.
- Remove all directories you don't need.
- Include a new play in the role to set up the webserver document root and use the following instructions:

Task 3: Creating Role - 2
- Use parted to create a new partition with a size of 2GB on the second hard drive.
- Create XFS file system on the partition, but make sure it fail if there is an existing file system.
- Mount the partition persistently on /web
- Set SELinux context label on /web to httpd_sys_content_t.
- Create a template for index.html in which the server name is determined dynamically, based in ansible facts.

Task 4: Deploying Ansible Tower
- Use the evaluation version of ansible that is provided by RedHat to install Ansible Tower on dedicated
  new virtual machine.
- Execute demo job template and evaluate it's job  details and output.
- Write a simple YAML file and include it such that it can be started from Ansible Tower.
